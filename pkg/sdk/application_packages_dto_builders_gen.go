// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateApplicationPackageRequest(
	name AccountObjectIdentifier,
) *CreateApplicationPackageRequest {
	s := CreateApplicationPackageRequest{}
	s.name = name
	return &s
}

func (s *CreateApplicationPackageRequest) WithIfNotExists(IfNotExists *bool) *CreateApplicationPackageRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateApplicationPackageRequest) WithDataRetentionTimeInDays(DataRetentionTimeInDays *int) *CreateApplicationPackageRequest {
	s.DataRetentionTimeInDays = DataRetentionTimeInDays
	return s
}

func (s *CreateApplicationPackageRequest) WithMaxDataExtensionTimeInDays(MaxDataExtensionTimeInDays *int) *CreateApplicationPackageRequest {
	s.MaxDataExtensionTimeInDays = MaxDataExtensionTimeInDays
	return s
}

func (s *CreateApplicationPackageRequest) WithDefaultDdlCollation(DefaultDdlCollation *string) *CreateApplicationPackageRequest {
	s.DefaultDdlCollation = DefaultDdlCollation
	return s
}

func (s *CreateApplicationPackageRequest) WithComment(Comment *string) *CreateApplicationPackageRequest {
	s.Comment = Comment
	return s
}

func (s *CreateApplicationPackageRequest) WithTag(Tag []TagAssociation) *CreateApplicationPackageRequest {
	s.Tag = Tag
	return s
}

func (s *CreateApplicationPackageRequest) WithDistribution(Distribution *string) *CreateApplicationPackageRequest {
	s.Distribution = Distribution
	return s
}

func NewAlterApplicationPackageRequest(
	name AccountObjectIdentifier,
) *AlterApplicationPackageRequest {
	s := AlterApplicationPackageRequest{}
	s.name = name
	return &s
}

func (s *AlterApplicationPackageRequest) WithIfExists(IfExists *bool) *AlterApplicationPackageRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterApplicationPackageRequest) WithSet(Set *ApplicationPackageSetRequest) *AlterApplicationPackageRequest {
	s.Set = Set
	return s
}

func (s *AlterApplicationPackageRequest) WithUnset(Unset *ApplicationPackageUnsetRequest) *AlterApplicationPackageRequest {
	s.Unset = Unset
	return s
}

func NewApplicationPackageSetRequest() *ApplicationPackageSetRequest {
	return &ApplicationPackageSetRequest{}
}

func (s *ApplicationPackageSetRequest) WithDataRetentionTimeInDays(DataRetentionTimeInDays *int) *ApplicationPackageSetRequest {
	s.DataRetentionTimeInDays = DataRetentionTimeInDays
	return s
}

func (s *ApplicationPackageSetRequest) WithMaxDataExtensionTimeInDays(MaxDataExtensionTimeInDays *int) *ApplicationPackageSetRequest {
	s.MaxDataExtensionTimeInDays = MaxDataExtensionTimeInDays
	return s
}

func (s *ApplicationPackageSetRequest) WithDefaultDdlCollation(DefaultDdlCollation *string) *ApplicationPackageSetRequest {
	s.DefaultDdlCollation = DefaultDdlCollation
	return s
}

func (s *ApplicationPackageSetRequest) WithComment(Comment *string) *ApplicationPackageSetRequest {
	s.Comment = Comment
	return s
}

func (s *ApplicationPackageSetRequest) WithDistribution(Distribution *string) *ApplicationPackageSetRequest {
	s.Distribution = Distribution
	return s
}

func NewApplicationPackageUnsetRequest() *ApplicationPackageUnsetRequest {
	return &ApplicationPackageUnsetRequest{}
}

func (s *ApplicationPackageUnsetRequest) WithDataRetentionTimeInDays(DataRetentionTimeInDays *bool) *ApplicationPackageUnsetRequest {
	s.DataRetentionTimeInDays = DataRetentionTimeInDays
	return s
}

func (s *ApplicationPackageUnsetRequest) WithMaxDataExtensionTimeInDays(MaxDataExtensionTimeInDays *bool) *ApplicationPackageUnsetRequest {
	s.MaxDataExtensionTimeInDays = MaxDataExtensionTimeInDays
	return s
}

func (s *ApplicationPackageUnsetRequest) WithDefaultDdlCollation(DefaultDdlCollation *bool) *ApplicationPackageUnsetRequest {
	s.DefaultDdlCollation = DefaultDdlCollation
	return s
}

func (s *ApplicationPackageUnsetRequest) WithComment(Comment *bool) *ApplicationPackageUnsetRequest {
	s.Comment = Comment
	return s
}

func (s *ApplicationPackageUnsetRequest) WithDistribution(Distribution *bool) *ApplicationPackageUnsetRequest {
	s.Distribution = Distribution
	return s
}

func NewDropApplicationPackageRequest(
	name AccountObjectIdentifier,
) *DropApplicationPackageRequest {
	s := DropApplicationPackageRequest{}
	s.name = name
	return &s
}

func NewShowApplicationPackageRequest() *ShowApplicationPackageRequest {
	return &ShowApplicationPackageRequest{}
}

func (s *ShowApplicationPackageRequest) WithLike(pattern string) *ShowApplicationPackageRequest {
	s.Like = &Like{
		Pattern: String(pattern),
	}
	return s
}

func (s *ShowApplicationPackageRequest) WithIn(In *In) *ShowApplicationPackageRequest {
	s.In = In
	return s
}

func (s *ShowApplicationPackageRequest) WithStartsWith(StartsWith *string) *ShowApplicationPackageRequest {
	s.StartsWith = StartsWith
	return s
}

func (s *ShowApplicationPackageRequest) WithLimit(Limit *LimitFrom) *ShowApplicationPackageRequest {
	s.Limit = Limit
	return s
}
