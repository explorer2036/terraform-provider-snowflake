// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateReplicationGroupRequest(
	name AccountObjectIdentifier,
) *CreateReplicationGroupRequest {
	s := CreateReplicationGroupRequest{}
	s.name = name
	return &s
}

func (s *CreateReplicationGroupRequest) WithIfNotExists(IfNotExists *bool) *CreateReplicationGroupRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateReplicationGroupRequest) WithObjectTypes(ObjectTypes ReplicationGroupObjectTypesRequest) *CreateReplicationGroupRequest {
	s.ObjectTypes = ObjectTypes
	return s
}

func (s *CreateReplicationGroupRequest) WithDatabases(Databases []ReplicationGroupDatabaseRequest) *CreateReplicationGroupRequest {
	s.Databases = Databases
	return s
}

func (s *CreateReplicationGroupRequest) WithShares(Shares []ReplicationGroupShareRequest) *CreateReplicationGroupRequest {
	s.Shares = Shares
	return s
}

func (s *CreateReplicationGroupRequest) WithIntegrationTypes(IntegrationTypes []ReplicationGroupIntegrationTypeRequest) *CreateReplicationGroupRequest {
	s.IntegrationTypes = IntegrationTypes
	return s
}

func (s *CreateReplicationGroupRequest) WithAccounts(Accounts []ReplicationGroupAccountRequest) *CreateReplicationGroupRequest {
	s.Accounts = Accounts
	return s
}

func (s *CreateReplicationGroupRequest) WithIgnoreEditionCheck(IgnoreEditionCheck *bool) *CreateReplicationGroupRequest {
	s.IgnoreEditionCheck = IgnoreEditionCheck
	return s
}

func NewReplicationGroupObjectTypesRequest() *ReplicationGroupObjectTypesRequest {
	return &ReplicationGroupObjectTypesRequest{}
}

func (s *ReplicationGroupObjectTypesRequest) WithAccountParameters(AccountParameters *bool) *ReplicationGroupObjectTypesRequest {
	s.AccountParameters = AccountParameters
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithDatabases(Databases *bool) *ReplicationGroupObjectTypesRequest {
	s.Databases = Databases
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithIntegrations(Integrations *bool) *ReplicationGroupObjectTypesRequest {
	s.Integrations = Integrations
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithNetworkPolicies(NetworkPolicies *bool) *ReplicationGroupObjectTypesRequest {
	s.NetworkPolicies = NetworkPolicies
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithResourceMonitors(ResourceMonitors *bool) *ReplicationGroupObjectTypesRequest {
	s.ResourceMonitors = ResourceMonitors
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithRoles(Roles *bool) *ReplicationGroupObjectTypesRequest {
	s.Roles = Roles
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithShares(Shares *bool) *ReplicationGroupObjectTypesRequest {
	s.Shares = Shares
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithUsers(Users *bool) *ReplicationGroupObjectTypesRequest {
	s.Users = Users
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithWarehouses(Warehouses *bool) *ReplicationGroupObjectTypesRequest {
	s.Warehouses = Warehouses
	return s
}

func NewReplicationGroupDatabaseRequest() *ReplicationGroupDatabaseRequest {
	return &ReplicationGroupDatabaseRequest{}
}

func (s *ReplicationGroupDatabaseRequest) WithDatabase(Database string) *ReplicationGroupDatabaseRequest {
	s.Database = Database
	return s
}

func NewReplicationGroupShareRequest() *ReplicationGroupShareRequest {
	return &ReplicationGroupShareRequest{}
}

func (s *ReplicationGroupShareRequest) WithShare(Share string) *ReplicationGroupShareRequest {
	s.Share = Share
	return s
}

func NewReplicationGroupIntegrationTypeRequest() *ReplicationGroupIntegrationTypeRequest {
	return &ReplicationGroupIntegrationTypeRequest{}
}

func (s *ReplicationGroupIntegrationTypeRequest) WithIntegrationType(IntegrationType string) *ReplicationGroupIntegrationTypeRequest {
	s.IntegrationType = IntegrationType
	return s
}

func NewReplicationGroupAccountRequest() *ReplicationGroupAccountRequest {
	return &ReplicationGroupAccountRequest{}
}

func (s *ReplicationGroupAccountRequest) WithAccount(Account string) *ReplicationGroupAccountRequest {
	s.Account = Account
	return s
}
