// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateReplicationGroupRequest(
	name AccountObjectIdentifier,
) *CreateReplicationGroupRequest {
	s := CreateReplicationGroupRequest{}
	s.name = name
	return &s
}

func (s *CreateReplicationGroupRequest) WithIfNotExists(IfNotExists *bool) *CreateReplicationGroupRequest {
	s.IfNotExists = IfNotExists
	return s
}

func (s *CreateReplicationGroupRequest) WithObjectTypes(ObjectTypes ReplicationGroupObjectTypesRequest) *CreateReplicationGroupRequest {
	s.ObjectTypes = ObjectTypes
	return s
}

func (s *CreateReplicationGroupRequest) WithAllowedDatabases(AllowedDatabases []ReplicationGroupDatabaseRequest) *CreateReplicationGroupRequest {
	s.AllowedDatabases = AllowedDatabases
	return s
}

func (s *CreateReplicationGroupRequest) WithAllowedShares(AllowedShares []ReplicationGroupShareRequest) *CreateReplicationGroupRequest {
	s.AllowedShares = AllowedShares
	return s
}

func (s *CreateReplicationGroupRequest) WithAllowedIntegrationTypes(AllowedIntegrationTypes []ReplicationGroupIntegrationTypeRequest) *CreateReplicationGroupRequest {
	s.AllowedIntegrationTypes = AllowedIntegrationTypes
	return s
}

func (s *CreateReplicationGroupRequest) WithAllowedAccounts(AllowedAccounts []ReplicationGroupAccountRequest) *CreateReplicationGroupRequest {
	s.AllowedAccounts = AllowedAccounts
	return s
}

func (s *CreateReplicationGroupRequest) WithIgnoreEditionCheck(IgnoreEditionCheck *bool) *CreateReplicationGroupRequest {
	s.IgnoreEditionCheck = IgnoreEditionCheck
	return s
}

func (s *CreateReplicationGroupRequest) WithReplicationSchedule(ReplicationSchedule *ReplicationGroupScheduleRequest) *CreateReplicationGroupRequest {
	s.ReplicationSchedule = ReplicationSchedule
	return s
}

func NewReplicationGroupObjectTypesRequest() *ReplicationGroupObjectTypesRequest {
	return &ReplicationGroupObjectTypesRequest{}
}

func (s *ReplicationGroupObjectTypesRequest) WithAccountParameters(AccountParameters *bool) *ReplicationGroupObjectTypesRequest {
	s.AccountParameters = AccountParameters
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithDatabases(Databases *bool) *ReplicationGroupObjectTypesRequest {
	s.Databases = Databases
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithIntegrations(Integrations *bool) *ReplicationGroupObjectTypesRequest {
	s.Integrations = Integrations
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithNetworkPolicies(NetworkPolicies *bool) *ReplicationGroupObjectTypesRequest {
	s.NetworkPolicies = NetworkPolicies
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithResourceMonitors(ResourceMonitors *bool) *ReplicationGroupObjectTypesRequest {
	s.ResourceMonitors = ResourceMonitors
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithRoles(Roles *bool) *ReplicationGroupObjectTypesRequest {
	s.Roles = Roles
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithShares(Shares *bool) *ReplicationGroupObjectTypesRequest {
	s.Shares = Shares
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithUsers(Users *bool) *ReplicationGroupObjectTypesRequest {
	s.Users = Users
	return s
}

func (s *ReplicationGroupObjectTypesRequest) WithWarehouses(Warehouses *bool) *ReplicationGroupObjectTypesRequest {
	s.Warehouses = Warehouses
	return s
}

func NewReplicationGroupDatabaseRequest() *ReplicationGroupDatabaseRequest {
	return &ReplicationGroupDatabaseRequest{}
}

func (s *ReplicationGroupDatabaseRequest) WithDatabase(Database string) *ReplicationGroupDatabaseRequest {
	s.Database = Database
	return s
}

func NewReplicationGroupShareRequest() *ReplicationGroupShareRequest {
	return &ReplicationGroupShareRequest{}
}

func (s *ReplicationGroupShareRequest) WithShare(Share string) *ReplicationGroupShareRequest {
	s.Share = Share
	return s
}

func NewReplicationGroupIntegrationTypeRequest() *ReplicationGroupIntegrationTypeRequest {
	return &ReplicationGroupIntegrationTypeRequest{}
}

func (s *ReplicationGroupIntegrationTypeRequest) WithIntegrationType(IntegrationType string) *ReplicationGroupIntegrationTypeRequest {
	s.IntegrationType = IntegrationType
	return s
}

func NewReplicationGroupAccountRequest() *ReplicationGroupAccountRequest {
	return &ReplicationGroupAccountRequest{}
}

func (s *ReplicationGroupAccountRequest) WithAccount(Account string) *ReplicationGroupAccountRequest {
	s.Account = Account
	return s
}

func NewReplicationGroupScheduleRequest() *ReplicationGroupScheduleRequest {
	return &ReplicationGroupScheduleRequest{}
}

func (s *ReplicationGroupScheduleRequest) WithIntervalMinutes(IntervalMinutes *ScheduleIntervalMinutesRequest) *ReplicationGroupScheduleRequest {
	s.IntervalMinutes = IntervalMinutes
	return s
}

func (s *ReplicationGroupScheduleRequest) WithCronExpression(CronExpression *ScheduleCronExpressionRequest) *ReplicationGroupScheduleRequest {
	s.CronExpression = CronExpression
	return s
}

func NewScheduleIntervalMinutesRequest(
	Minutes int,
) *ScheduleIntervalMinutesRequest {
	s := ScheduleIntervalMinutesRequest{}
	s.Minutes = Minutes
	return &s
}

func NewScheduleCronExpressionRequest(
	Expression string,
	TimeZone string,
) *ScheduleCronExpressionRequest {
	s := ScheduleCronExpressionRequest{}
	s.Expression = Expression
	s.TimeZone = TimeZone
	return &s
}
