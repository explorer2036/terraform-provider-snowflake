// Code generated by dto builder generator; DO NOT EDIT.

package sdk

import ()

func NewCreateProcedureForJavaProcedureRequest(
	name SchemaObjectIdentifier,
	Returns ProcedureReturnsRequest,
	RuntimeVersion string,
	Packages []ProcedurePackageRequest,
	Handler string,
) *CreateProcedureForJavaProcedureRequest {
	s := CreateProcedureForJavaProcedureRequest{}
	s.name = name
	s.Returns = Returns
	s.RuntimeVersion = RuntimeVersion
	s.Packages = Packages
	s.Handler = Handler
	return &s
}

func (s *CreateProcedureForJavaProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForJavaProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForJavaProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForJavaProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForJavaProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithImports(Imports []ProcedureImportRequest) *CreateProcedureForJavaProcedureRequest {
	s.Imports = Imports
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations []AccountObjectIdentifier) *CreateProcedureForJavaProcedureRequest {
	s.ExternalAccessIntegrations = ExternalAccessIntegrations
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithSecrets(Secrets []Secret) *CreateProcedureForJavaProcedureRequest {
	s.Secrets = Secrets
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithTargetPath(TargetPath *string) *CreateProcedureForJavaProcedureRequest {
	s.TargetPath = TargetPath
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithNullInputBehavior(NullInputBehavior *NullInputBehavior) *CreateProcedureForJavaProcedureRequest {
	s.NullInputBehavior = NullInputBehavior
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithComment(Comment *string) *CreateProcedureForJavaProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithExecuteAs(ExecuteAs *ExecuteAs) *CreateProcedureForJavaProcedureRequest {
	s.ExecuteAs = ExecuteAs
	return s
}

func (s *CreateProcedureForJavaProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForJavaProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewProcedureArgumentRequest(
	ArgName string,
	ArgDataType DataType,
) *ProcedureArgumentRequest {
	s := ProcedureArgumentRequest{}
	s.ArgName = ArgName
	s.ArgDataType = ArgDataType
	return &s
}

func (s *ProcedureArgumentRequest) WithDefaultValue(DefaultValue *string) *ProcedureArgumentRequest {
	s.DefaultValue = DefaultValue
	return s
}

func NewProcedureReturnsRequest() *ProcedureReturnsRequest {
	return &ProcedureReturnsRequest{}
}

func (s *ProcedureReturnsRequest) WithResultDataType(ResultDataType *ProcedureReturnsResultDataTypeRequest) *ProcedureReturnsRequest {
	s.ResultDataType = ResultDataType
	return s
}

func (s *ProcedureReturnsRequest) WithTable(Table *ProcedureReturnsTableRequest) *ProcedureReturnsRequest {
	s.Table = Table
	return s
}

func NewProcedureReturnsResultDataTypeRequest(
	ResultDataType DataType,
) *ProcedureReturnsResultDataTypeRequest {
	s := ProcedureReturnsResultDataTypeRequest{}
	s.ResultDataType = ResultDataType
	return &s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithNull(Null *bool) *ProcedureReturnsResultDataTypeRequest {
	s.Null = Null
	return s
}

func (s *ProcedureReturnsResultDataTypeRequest) WithNotNull(NotNull *bool) *ProcedureReturnsResultDataTypeRequest {
	s.NotNull = NotNull
	return s
}

func NewProcedureReturnsTableRequest() *ProcedureReturnsTableRequest {
	return &ProcedureReturnsTableRequest{}
}

func (s *ProcedureReturnsTableRequest) WithColumns(Columns []ProcedureColumnRequest) *ProcedureReturnsTableRequest {
	s.Columns = Columns
	return s
}

func NewProcedureColumnRequest(
	ColumnName string,
	ColumnDataType DataType,
) *ProcedureColumnRequest {
	s := ProcedureColumnRequest{}
	s.ColumnName = ColumnName
	s.ColumnDataType = ColumnDataType
	return &s
}

func NewProcedurePackageRequest(
	Package string,
) *ProcedurePackageRequest {
	s := ProcedurePackageRequest{}
	s.Package = Package
	return &s
}

func NewProcedureImportRequest(
	Import string,
) *ProcedureImportRequest {
	s := ProcedureImportRequest{}
	s.Import = Import
	return &s
}

func NewCreateProcedureForJavaScriptProcedureRequest(
	name SchemaObjectIdentifier,
	ResultDataType DataType,
	ProcedureDefinition string,
) *CreateProcedureForJavaScriptProcedureRequest {
	s := CreateProcedureForJavaScriptProcedureRequest{}
	s.name = name
	s.ResultDataType = ResultDataType
	s.ProcedureDefinition = ProcedureDefinition
	return &s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForJavaScriptProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithNotNull(NotNull *bool) *CreateProcedureForJavaScriptProcedureRequest {
	s.NotNull = NotNull
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithNullInputBehavior(NullInputBehavior *NullInputBehavior) *CreateProcedureForJavaScriptProcedureRequest {
	s.NullInputBehavior = NullInputBehavior
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithComment(Comment *string) *CreateProcedureForJavaScriptProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForJavaScriptProcedureRequest) WithExecuteAs(ExecuteAs *ExecuteAs) *CreateProcedureForJavaScriptProcedureRequest {
	s.ExecuteAs = ExecuteAs
	return s
}

func NewCreateProcedureForPythonProcedureRequest(
	name SchemaObjectIdentifier,
	Returns ProcedureReturnsRequest,
	RuntimeVersion string,
	Packages []ProcedurePackageRequest,
	Handler string,
) *CreateProcedureForPythonProcedureRequest {
	s := CreateProcedureForPythonProcedureRequest{}
	s.name = name
	s.Returns = Returns
	s.RuntimeVersion = RuntimeVersion
	s.Packages = Packages
	s.Handler = Handler
	return &s
}

func (s *CreateProcedureForPythonProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForPythonProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForPythonProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForPythonProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForPythonProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithImports(Imports []ProcedureImportRequest) *CreateProcedureForPythonProcedureRequest {
	s.Imports = Imports
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithExternalAccessIntegrations(ExternalAccessIntegrations []AccountObjectIdentifier) *CreateProcedureForPythonProcedureRequest {
	s.ExternalAccessIntegrations = ExternalAccessIntegrations
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithSecrets(Secrets []Secret) *CreateProcedureForPythonProcedureRequest {
	s.Secrets = Secrets
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithNullInputBehavior(NullInputBehavior *NullInputBehavior) *CreateProcedureForPythonProcedureRequest {
	s.NullInputBehavior = NullInputBehavior
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithComment(Comment *string) *CreateProcedureForPythonProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithExecuteAs(ExecuteAs *ExecuteAs) *CreateProcedureForPythonProcedureRequest {
	s.ExecuteAs = ExecuteAs
	return s
}

func (s *CreateProcedureForPythonProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForPythonProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewCreateProcedureForScalaProcedureRequest(
	name SchemaObjectIdentifier,
	Returns ProcedureReturnsRequest,
	RuntimeVersion string,
	Packages []ProcedurePackageRequest,
	Handler string,
) *CreateProcedureForScalaProcedureRequest {
	s := CreateProcedureForScalaProcedureRequest{}
	s.name = name
	s.Returns = Returns
	s.RuntimeVersion = RuntimeVersion
	s.Packages = Packages
	s.Handler = Handler
	return &s
}

func (s *CreateProcedureForScalaProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForScalaProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForScalaProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForScalaProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForScalaProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithImports(Imports []ProcedureImportRequest) *CreateProcedureForScalaProcedureRequest {
	s.Imports = Imports
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithTargetPath(TargetPath *string) *CreateProcedureForScalaProcedureRequest {
	s.TargetPath = TargetPath
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithNullInputBehavior(NullInputBehavior *NullInputBehavior) *CreateProcedureForScalaProcedureRequest {
	s.NullInputBehavior = NullInputBehavior
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithComment(Comment *string) *CreateProcedureForScalaProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithExecuteAs(ExecuteAs *ExecuteAs) *CreateProcedureForScalaProcedureRequest {
	s.ExecuteAs = ExecuteAs
	return s
}

func (s *CreateProcedureForScalaProcedureRequest) WithProcedureDefinition(ProcedureDefinition *string) *CreateProcedureForScalaProcedureRequest {
	s.ProcedureDefinition = ProcedureDefinition
	return s
}

func NewCreateProcedureForSQLProcedureRequest(
	name SchemaObjectIdentifier,
	Returns ProcedureSQLReturnsRequest,
	ProcedureDefinition string,
) *CreateProcedureForSQLProcedureRequest {
	s := CreateProcedureForSQLProcedureRequest{}
	s.name = name
	s.Returns = Returns
	s.ProcedureDefinition = ProcedureDefinition
	return &s
}

func (s *CreateProcedureForSQLProcedureRequest) WithOrReplace(OrReplace *bool) *CreateProcedureForSQLProcedureRequest {
	s.OrReplace = OrReplace
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithSecure(Secure *bool) *CreateProcedureForSQLProcedureRequest {
	s.Secure = Secure
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithArguments(Arguments []ProcedureArgumentRequest) *CreateProcedureForSQLProcedureRequest {
	s.Arguments = Arguments
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithCopyGrants(CopyGrants *bool) *CreateProcedureForSQLProcedureRequest {
	s.CopyGrants = CopyGrants
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithNullInputBehavior(NullInputBehavior *NullInputBehavior) *CreateProcedureForSQLProcedureRequest {
	s.NullInputBehavior = NullInputBehavior
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithComment(Comment *string) *CreateProcedureForSQLProcedureRequest {
	s.Comment = Comment
	return s
}

func (s *CreateProcedureForSQLProcedureRequest) WithExecuteAs(ExecuteAs *ExecuteAs) *CreateProcedureForSQLProcedureRequest {
	s.ExecuteAs = ExecuteAs
	return s
}

func NewProcedureSQLReturnsRequest() *ProcedureSQLReturnsRequest {
	return &ProcedureSQLReturnsRequest{}
}

func (s *ProcedureSQLReturnsRequest) WithResultDataType(ResultDataType *ProcedureReturnsResultDataTypeRequest) *ProcedureSQLReturnsRequest {
	s.ResultDataType = ResultDataType
	return s
}

func (s *ProcedureSQLReturnsRequest) WithTable(Table *ProcedureReturnsTableRequest) *ProcedureSQLReturnsRequest {
	s.Table = Table
	return s
}

func (s *ProcedureSQLReturnsRequest) WithNotNull(NotNull *bool) *ProcedureSQLReturnsRequest {
	s.NotNull = NotNull
	return s
}

func NewAlterProcedureRequest(
	name SchemaObjectIdentifier,
	ArgumentDataTypes []DataType,
) *AlterProcedureRequest {
	s := AlterProcedureRequest{}
	s.name = name
	s.ArgumentDataTypes = ArgumentDataTypes
	return &s
}

func (s *AlterProcedureRequest) WithIfExists(IfExists *bool) *AlterProcedureRequest {
	s.IfExists = IfExists
	return s
}

func (s *AlterProcedureRequest) WithRenameTo(RenameTo *SchemaObjectIdentifier) *AlterProcedureRequest {
	s.RenameTo = RenameTo
	return s
}

func (s *AlterProcedureRequest) WithSetComment(SetComment *string) *AlterProcedureRequest {
	s.SetComment = SetComment
	return s
}

func (s *AlterProcedureRequest) WithSetLogLevel(SetLogLevel *string) *AlterProcedureRequest {
	s.SetLogLevel = SetLogLevel
	return s
}

func (s *AlterProcedureRequest) WithSetTraceLevel(SetTraceLevel *string) *AlterProcedureRequest {
	s.SetTraceLevel = SetTraceLevel
	return s
}

func (s *AlterProcedureRequest) WithUnsetComment(UnsetComment *bool) *AlterProcedureRequest {
	s.UnsetComment = UnsetComment
	return s
}

func (s *AlterProcedureRequest) WithSetTags(SetTags []TagAssociation) *AlterProcedureRequest {
	s.SetTags = SetTags
	return s
}

func (s *AlterProcedureRequest) WithUnsetTags(UnsetTags []ObjectIdentifier) *AlterProcedureRequest {
	s.UnsetTags = UnsetTags
	return s
}

func (s *AlterProcedureRequest) WithExecuteAs(ExecuteAs *ExecuteAs) *AlterProcedureRequest {
	s.ExecuteAs = ExecuteAs
	return s
}

func NewDropProcedureRequest(
	name SchemaObjectIdentifier,
	ArgumentDataTypes []DataType,
) *DropProcedureRequest {
	s := DropProcedureRequest{}
	s.name = name
	s.ArgumentDataTypes = ArgumentDataTypes
	return &s
}

func (s *DropProcedureRequest) WithIfExists(IfExists *bool) *DropProcedureRequest {
	s.IfExists = IfExists
	return s
}

func NewShowProcedureRequest() *ShowProcedureRequest {
	return &ShowProcedureRequest{}
}

func (s *ShowProcedureRequest) WithLike(Like *Like) *ShowProcedureRequest {
	s.Like = Like
	return s
}

func (s *ShowProcedureRequest) WithIn(In *In) *ShowProcedureRequest {
	s.In = In
	return s
}

func NewDescribeProcedureRequest(
	name SchemaObjectIdentifier,
	ArgumentDataTypes []DataType,
) *DescribeProcedureRequest {
	s := DescribeProcedureRequest{}
	s.name = name
	s.ArgumentDataTypes = ArgumentDataTypes
	return &s
}
